package DataDictionaryDSLLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class StructureRepository__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xc81a5de5c82046dcL, 0xb13e1fa2a0dad109L, 0x6f4b224578073e21L, "DataDictionaryDSLLanguage.structure.StructureRepository");

  public static final SMethod<Void> addStructure_id4Bnt$kqo5xt = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addStructure").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5320851523928873053L).languageId(0xb13e1fa2a0dad109L, 0xc81a5de5c82046dcL).build2();
  public static final SMethod<Boolean> isExistStructureName_id4Bnt$kqo5$0 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isExistStructureName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5320851523928873216L).languageId(0xb13e1fa2a0dad109L, 0xc81a5de5c82046dcL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(addStructure_id4Bnt$kqo5xt, isExistStructureName_id4Bnt$kqo5$0);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void addStructure_id4Bnt$kqo5xt(@NotNull SNode __thisNode__) {
  }
  /*package*/ static boolean isExistStructureName_id4Bnt$kqo5$0(@NotNull SNode __thisNode__, SNode structure) {
    return false;
  }

  /*package*/ StructureRepository__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        addStructure_id4Bnt$kqo5xt(node);
        return null;
      case 1:
        return (T) ((Boolean) isExistStructureName_id4Bnt$kqo5$0(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
