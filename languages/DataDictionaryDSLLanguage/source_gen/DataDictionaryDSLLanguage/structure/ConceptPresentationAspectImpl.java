package DataDictionaryDSLLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Agregation;
  private ConceptPresentation props_BetweenConstraint;
  private ConceptPresentation props_CanBeNull;
  private ConceptPresentation props_ComparesonConstraint;
  private ConceptPresentation props_Constraint;
  private ConceptPresentation props_Domen;
  private ConceptPresentation props_ExclusiveSpecialization;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_InConstraint;
  private ConceptPresentation props_InValue;
  private ConceptPresentation props_NotNullConstraint;
  private ConceptPresentation props_Nullability;
  private ConceptPresentation props_PredefinedDomen;
  private ConceptPresentation props_Reference;
  private ConceptPresentation props_Row;
  private ConceptPresentation props_SemanticDomen;
  private ConceptPresentation props_Set;
  private ConceptPresentation props_Structure;
  private ConceptPresentation props_StructureReference;
  private ConceptPresentation props_StructureRepository;
  private ConceptPresentation props_Table;
  private ConceptPresentation props_UnexclusiveSpecialization;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Agregation:
        if (props_Agregation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Agregation = cpb.create();
        }
        return props_Agregation;
      case LanguageConceptSwitch.BetweenConstraint:
        if (props_BetweenConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BETWEEN");
          props_BetweenConstraint = cpb.create();
        }
        return props_BetweenConstraint;
      case LanguageConceptSwitch.CanBeNull:
        if (props_CanBeNull == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CanBeNull");
          props_CanBeNull = cpb.create();
        }
        return props_CanBeNull;
      case LanguageConceptSwitch.ComparesonConstraint:
        if (props_ComparesonConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ComparesonConstraint");
          props_ComparesonConstraint = cpb.create();
        }
        return props_ComparesonConstraint;
      case LanguageConceptSwitch.Constraint:
        if (props_Constraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Constraint");
          props_Constraint = cpb.create();
        }
        return props_Constraint;
      case LanguageConceptSwitch.Domen:
        if (props_Domen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Domen");
          props_Domen = cpb.create();
        }
        return props_Domen;
      case LanguageConceptSwitch.ExclusiveSpecialization:
        if (props_ExclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExclusiveSpecialization = cpb.create();
        }
        return props_ExclusiveSpecialization;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.InConstraint:
        if (props_InConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IN");
          props_InConstraint = cpb.create();
        }
        return props_InConstraint;
      case LanguageConceptSwitch.InValue:
        if (props_InValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InValue");
          props_InValue = cpb.create();
        }
        return props_InValue;
      case LanguageConceptSwitch.NotNullConstraint:
        if (props_NotNullConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NOT NULL");
          props_NotNullConstraint = cpb.create();
        }
        return props_NotNullConstraint;
      case LanguageConceptSwitch.Nullability:
        if (props_Nullability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Nullability");
          props_Nullability = cpb.create();
        }
        return props_Nullability;
      case LanguageConceptSwitch.PredefinedDomen:
        if (props_PredefinedDomen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PredefinedDomen");
          props_PredefinedDomen = cpb.create();
        }
        return props_PredefinedDomen;
      case LanguageConceptSwitch.Reference:
        if (props_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Reference = cpb.create();
        }
        return props_Reference;
      case LanguageConceptSwitch.Row:
        if (props_Row == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Row = cpb.create();
        }
        return props_Row;
      case LanguageConceptSwitch.SemanticDomen:
        if (props_SemanticDomen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SemanticDomen");
          props_SemanticDomen = cpb.create();
        }
        return props_SemanticDomen;
      case LanguageConceptSwitch.Set:
        if (props_Set == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Set = cpb.create();
        }
        return props_Set;
      case LanguageConceptSwitch.Structure:
        if (props_Structure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Structure = cpb.create();
        }
        return props_Structure;
      case LanguageConceptSwitch.StructureReference:
        if (props_StructureReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StructureReference = cpb.create();
        }
        return props_StructureReference;
      case LanguageConceptSwitch.StructureRepository:
        if (props_StructureRepository == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StructureRepository = cpb.create();
        }
        return props_StructureRepository;
      case LanguageConceptSwitch.Table:
        if (props_Table == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Table = cpb.create();
        }
        return props_Table;
      case LanguageConceptSwitch.UnexclusiveSpecialization:
        if (props_UnexclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UnexclusiveSpecialization = cpb.create();
        }
        return props_UnexclusiveSpecialization;
    }
    return null;
  }
}
