package DataDictionaryDSLLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Agregation = 0;
  public static final int BetweenConstraint = 1;
  public static final int CanBeNull = 2;
  public static final int ComparesonConstraint = 3;
  public static final int Constraint = 4;
  public static final int Domen = 5;
  public static final int ExclusiveSpecialization = 6;
  public static final int Field = 7;
  public static final int InConstraint = 8;
  public static final int InValue = 9;
  public static final int NotNullConstraint = 10;
  public static final int Nullability = 11;
  public static final int PredefinedDomen = 12;
  public static final int Reference = 13;
  public static final int Row = 14;
  public static final int SemanticDomen = 15;
  public static final int Set = 16;
  public static final int Structure = 17;
  public static final int StructureReference = 18;
  public static final int StructureRepository = 19;
  public static final int Table = 20;
  public static final int UnexclusiveSpecialization = 21;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xc81a5de5c82046dcL, 0xb13e1fa2a0dad109L);
    builder.put(0x6f4b224578073b01L, Agregation);
    builder.put(0x17622f3691def413L, BetweenConstraint);
    builder.put(0x17622f3691fc535fL, CanBeNull);
    builder.put(0x17622f369202b9daL, ComparesonConstraint);
    builder.put(0x17622f3691def411L, Constraint);
    builder.put(0x17622f3691ebb513L, Domen);
    builder.put(0x6f4b224578078449L, ExclusiveSpecialization);
    builder.put(0x6f4b22457807455dL, Field);
    builder.put(0x17622f3691defac0L, InConstraint);
    builder.put(0x17622f3691e2b810L, InValue);
    builder.put(0x17622f3691f9b4daL, NotNullConstraint);
    builder.put(0x17622f3691f9b4d4L, Nullability);
    builder.put(0x1052e67ff6c57e8bL, PredefinedDomen);
    builder.put(0x1052e67ff6c6005eL, Reference);
    builder.put(0x1052e67ff6c3eed4L, Row);
    builder.put(0x17622f3691ebb512L, SemanticDomen);
    builder.put(0x1052e67ff6c07d59L, Set);
    builder.put(0x6f4b224578073afdL, Structure);
    builder.put(0x6f4b22457808af51L, StructureReference);
    builder.put(0x6f4b224578073e21L, StructureRepository);
    builder.put(0x1052e67ff6c3eec2L, Table);
    builder.put(0xd2d707c97ae7ba8L, UnexclusiveSpecialization);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
